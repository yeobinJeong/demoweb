/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.32
 * Generated at: 2016-04-21 09:22:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.dot;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class display_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/C:/Users/stu30/Desktop/LAB/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/demoweb/WEB-INF/lib/jstl-1.2.jar!/META-INF/fn.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1461129002934L));
    _jspx_dependants.put("jar:file:/C:/Users/stu30/Desktop/LAB/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/demoweb/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta charset=\"utf-8\" />\r\n");
      out.write("\t<title>Home</title>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t");
 String[] dotData = (String[])request.getAttribute("index"); 
      out.write('\r');
      out.write('\n');
      out.write('	');
 String[] dotColor = (String[])request.getAttribute("color");
      out.write('\r');
      out.write('\n');
      out.write('	');
 String[] evolData = (String[])request.getAttribute("evolindex"); 
      out.write('\r');
      out.write('\n');
      out.write('	');
 String[] evolColor = (String[])request.getAttribute("evolcolor");
      out.write('\r');
      out.write('\n');
      out.write('	');
 String[] boombData = (String[])request.getAttribute("boomindex"); 
      out.write('\r');
      out.write('\n');
      out.write('	');
 String[] boombColor = (String[])request.getAttribute("boomcolor");
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tdot = document.getElementsByClassName(\"dot\");\r\n");
      out.write("\tvar timer = null;\r\n");
      out.write("\tvar varindex= [];\r\n");
      out.write("\tvar varcolor= [];\r\n");
      out.write("\tvar evolindex= [];\r\n");
      out.write("\tvar evolcolor= [];\r\n");
      out.write("\tvar boomindex=[];\r\n");
      out.write("\tvar boomcolor=[];\r\n");
      out.write("\t\r\n");
      out.write("\tvar count=0;\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tfunction dotMove(event){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\tif(count < 10 ){\r\n");
      out.write("\t\t\t\tmoveLeft(varindex);\r\n");
      out.write("\t\t\t\tcount++;\t\t\t\t\r\n");
      out.write("\t\t\t}else if(9 < count && count < 25 ){\r\n");
      out.write("\t\t\t\tmoveRight(varindex);\r\n");
      out.write("\t\t\t\tcount++;\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\tcount=0;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\ttimer = setTimeout(\"dotMove()\", 500);\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tfunction dotClick(event){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar target = event.target;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfor(var k=0; k<dot.length; k++){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif( target == dot[parseInt(k)] ){\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar x = parseInt(k%40);\r\n");
      out.write("\t\t\t\tvar y = parseInt(k/40);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif(x<20){\r\n");
      out.write("\t\t\t\t\t/* moveLeft(); */\r\n");
      out.write("\t\t\t\t\tdoStop();\r\n");
      out.write("\t\t\t\t\tcount=0;\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\tdotMove();\r\n");
      out.write("\t\t\t\t\t/* moveRight(); */\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tfunction moveLeft(targetindex){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfor(var i=0; i<targetindex.length; i++) {\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar x = parseInt(targetindex[i]%40);\r\n");
      out.write("\t\t\tvar y = parseInt(targetindex[i]/40);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif( x > 1 ){\r\n");
      out.write("\t\t\t\t/* if( i == targetindex.length-1){\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tfor(var k=0; k<targetindex.length; k++){\r\n");
      out.write("\t\t\t\t\t\ttargetindex[k] -= 2;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t} */\r\n");
      out.write("\t\t\t\ttargetindex[i] -= 2;\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\tcontinue;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction moveRight(targetindex){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfor(var i=0; i<targetindex.length; i++) {\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar x = parseInt(targetindex[i]%40);\r\n");
      out.write("\t\t\tvar y = parseInt(targetindex[i]/40);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif( x < 39 ){\r\n");
      out.write("\t\t\t\t/* if( i == targetindex.length-1){\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tfor(var k=0; k<targetindex.length; k++){\r\n");
      out.write("\t\t\t\t\t\ttargetindex[k] += 2;\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t} */\r\n");
      out.write("\t\t\t\ttargetindex[i] += 2;\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tcontinue;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction dotRotate(targetindex){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfor(var i=0; i<targetindex.length; i++) { \r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t    var dotX = parseInt(targetindex[i]%40);\r\n");
      out.write("\t\t    var dotY = parseInt(targetindex[i]/40);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t    if(dotY < 15){\r\n");
      out.write("\t\t\t\tvar rotX = parseInt( dotX*Math.cos(90) - dotY*Math.sin(90));\r\n");
      out.write("\t\t\t\tvar rotY = parseInt( dotX*Math.sin(90) + dotY*Math.cos(90));\r\n");
      out.write("\t\t\t\tdotX = rotX;\r\n");
      out.write("\t\t\t\tdotY = rotY;\r\n");
      out.write("\t\t    }\r\n");
      out.write("\t\t\t/* var resultX = rotX;\r\n");
      out.write("\t\t\tvar resultY = rotY; */\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\ttargetindex[i] = dotY*40 + dotX;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction gridRound(event){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tdotClean();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar dotindex = 0;\r\n");
      out.write("\t\tfor(var i=0; i<1599; i++){\r\n");
      out.write("\t\t\t \r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t    var dotX = parseInt(i%40);\r\n");
      out.write("\t\t    var dotY = parseInt(i/40);\r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t    \r\n");
      out.write("\t\t\tif( parseInt((dotX-5)*(dotX-5) + (dotY-5)*(dotY-5)) == parseInt(25) ){\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvarindex[dotindex] = dotY*40 + dotX;\r\n");
      out.write("\t\t\t\talert(dotindex);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tdotindex++;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfor(var i=0; i<varindex.length; i++) {\r\n");
      out.write("\t\t\tvar index = varindex[i];\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\tdot[index].style.backgroundColor = \"black\";\r\n");
      out.write("\t    }\r\n");
      out.write("\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tfunction dotDisplay(targetindex, targetcolor){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t for(var i=0; i<targetindex.length; i++) {\r\n");
      out.write("\t\t\tvar index = targetindex[i];\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tdot[index].style.backgroundColor = targetcolor[i];\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction dotClean(event){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfor(var i=0; i<dot.length; i++){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tdot[i].style.backgroundColor = \"white\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tvar evolCnt=0;\r\n");
      out.write("\tfunction evol(event){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(evolCnt == 0)\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tmoveLeft(evolindex);\r\n");
      out.write("\t\t\tevolCnt++;\r\n");
      out.write("\t\t\tcount++;\r\n");
      out.write("\t\t}else if( evolCnt == 1){\r\n");
      out.write("\t\t\tmoveRight(evolindex);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tevolCnt--;\r\n");
      out.write("\t\t\tcount++;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tdotClean();\r\n");
      out.write("\t\tdotDisplay(evolindex, evolcolor);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\ttimer = setTimeout(\"evol()\", 100);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(count == 10){\r\n");
      out.write("\t\t\tdoStop();\r\n");
      out.write("\t\t\tcount =0;\r\n");
      out.write("\t\t\tevolCnt=0;\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tdotClean();\r\n");
      out.write("\t\t\tboomb(boomindex, boomcolor);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\tvar boomCnt=0;\r\n");
      out.write("\tfunction boomb(event){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(boomCnt == 0)\r\n");
      out.write("\t\t\t{\r\n");
      out.write("\t\t\t\tmoveLeft(boomindex);\r\n");
      out.write("\t\t\t\tboomCnt++;\r\n");
      out.write("\t\t\t\tcount++;\r\n");
      out.write("\t\t\t}else if( boomCnt == 1){\r\n");
      out.write("\t\t\t\tmoveRight(boomindex);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tboomCnt--;\r\n");
      out.write("\t\t\t\tcount++;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tdotClean();\r\n");
      out.write("\t\t\tdotDisplay(boomindex, boomcolor);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\ttimer = setTimeout(\"boomb()\", 100);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif(count == 10){\r\n");
      out.write("\t\t\t\tdoStop();\r\n");
      out.write("\t\t\t\tcount =0;\r\n");
      out.write("\t\t\t\tevolCnt=0;\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tdotClean();\r\n");
      out.write("\t\t\t\tdotDisplay(varindex, varcolor);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tfunction doStart(event){\r\n");
      out.write("\t\t\t ");
 for(int i=0; i<dotData.length; i++) {
      out.write("\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t");
				
				int temp2 = Integer.parseInt(dotData[i]);
				
      out.write("\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvarindex[");
      out.print(i);
      out.write("] = ");
      out.print(temp2);
      out.write(";\r\n");
      out.write("\t\t\t\tvarcolor[");
      out.print(i);
      out.write("] = \"");
      out.print(dotColor[i]);
      out.write("\";\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t");
}
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t");
 for(int i=0; i<evolData.length; i++){
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t");
				
			int temp2 = Integer.parseInt(evolData[i]);
			
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tevolindex[");
      out.print(i);
      out.write("] = ");
      out.print(temp2);
      out.write(";\r\n");
      out.write("\t\t\tevolcolor[");
      out.print(i);
      out.write("] = \"");
      out.print(evolColor[i]);
      out.write("\";\r\n");
      out.write("\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t");
 for(int i=0; i<boombData.length; i++){
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t");
				
			int temp2 = Integer.parseInt(boombData[i]);
			
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tboomindex[");
      out.print(i);
      out.write("] = ");
      out.print(temp2);
      out.write(";\r\n");
      out.write("\t\t\tboomcolor[");
      out.print(i);
      out.write("] = \"");
      out.print(boombColor[i]);
      out.write("\";\r\n");
      out.write("\t\t\t");
 } 
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tdotDisplay(varindex, varcolor);\r\n");
      out.write("\t\t\t/* dotDisplay(varindex, varcolor); \r\n");
      out.write("\t\t\ttimer =  window.setTimeout(\"dotMove()\", 500);  */\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction doStop(event){\r\n");
      out.write("\t\twindow.clearTimeout(timer);\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\twindow.onload = function(event){\r\n");
      out.write("\t\tfor(var i=0; i<dot.length; i++){\r\n");
      out.write("\t\t\tdot[i].addEventListener(\"click\", dotClick);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tdoStart(); \r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t</script>\r\n");
      out.write("\t<style type=\"text/css\"></style>\r\n");
      out.write("\t<link rel=\"Stylesheet\" href=\"/demoweb/styles/default.css\" />\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<div id=\"pageContainer\">\r\n");
      out.write("\t\r\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/include/header.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("background", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("palegreen", request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<div align='center' style='margin-top: 30px'>\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<table  border='2'>\r\n");
      out.write("\t\t\t\t ");
for(int i = 0; i< 40; i++){
      out.write("\r\n");
      out.write("\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t");
 for(int j =0; j< 40; j++){ 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<td class='dot' id='");
      out.print((i*40)+j);
      out.write("' style='width: 9px; height: 9px; background-color: white;'></td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t");
}
      out.write("\r\n");
      out.write("\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t");
}
      out.write(" \r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t<a href=\"javascript:evol();\">진화</a> \r\n");
      out.write("\t\t\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
